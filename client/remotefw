#!/bin/sh

if [ -z $1 ]
    # Empty
    then
        echo "[Error] You must tell me what to do!"
        exit 1
fi

#=============== Start of Baked-in Variables ===============
runCommand=$1
runCondition=$2
optCondition=$3
date=$("date")
agentVersion="1.0"
#=============== End of Baked-in Variables ===============

#=============== Start of Functions ===============
importConfig() {
    if [ -f /etc/remotefw/main.cfg ]
            then
                . /etc/remotefw/main.cfg
                remoteFwConfig="$remotefwConfigDir/main.cfg"

                if [ "$runCondition" = "audit" ];
                    then
                        echo "/etc/remotefw/main.cfg was detected!"
                fi
            else
                installDir="/usr/local/sbin"
                remotefwConfigDir="/etc/remotefw"
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Check] /etc/remotefw/main.cfg was not detected. I suggest you install first."
                        echo "[remotefwConfigDir] $remotefwConfigDir"
                        echo "[installDir] $installDir"
                fi
    fi
}

createSystemInfo() {
    if [ -f $systemInfo ]
            then                    
                echo "[NOTICE] $systemInfo detected!"
                echo "[NOTICE] File moved to $systemInfo.bak"
                mv $systemInfo $systemInfo.bak
                . /etc/remotefw/system.info
            else
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[NOTICE] $systemInfo was not detected. Proceeding."
                        touch $systemInfo
                fi
    fi
}

importSystemInfo() {
    if [ -f /etc/remotefw/system.info ]
            then
                . /etc/remotefw/system.info
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Check] /etc/remotefw/system.info detected!"
                fi    
            else    
                createSystemInfo
    fi
}

statusRptCheck() {
    if [ -z $statusRpt ]
        # Empty
        then
            echo "[Error]   It appears the statusRpt field is empty and the script cannot proceed. Sorry!"
            exit 1
    fi
}

remotefwInstall() {
    echo "[$date] Installation Started."
    # exit 0
    # clear
    if [ "$runCondition" = "audit" ];
        then
            echo "[Install] mkdir: $remotefwConfigDir"
    fi
    mkdir -p $remotefwConfigDir
    
    if [ "$runCondition" = "audit" ];
        then
            echo "[Install] Copying File: main.cfg to $remotefwConfigDir/main.cfg"
    fi
    cp main.cfg $remotefwConfigDir/main.cfg

    if [ "$runCondition" = "audit" ];
        then
            echo "[Install] remotefw to $installDir"
    fi
    cp remotefw $installDir/remotefw
    
    if [ "$runCondition" = "audit" ];
        then
            echo "[Install] Setting remotefw as executable: $installDir/remotefw"
    fi
    chmod +x $installDir/remotefw
    
    if [ "$runCondition" = "audit" ];
        then
            echo "[Install] PHP Client Configuration Page"
    fi
    cp services_remotefw.php /usr/local/www/services_remotefw.php
    
    echo "To start the adopt process type:"
    echo "# remotefw adopt"
    echo "See the Help section for more information:"
    echo "# remotefw help"
    echo "[$date] Installation complete."
    exit 0
}

currentVersionOPN() {
    # Check what the currently installed version of OPNSense is
    osVerRc=$("/usr/local/sbin/opnsense-version")
    # osVerRc="(/usr/local/sbin/opnsense-version)"
    # echo $osVerRc[1]
    # exit
    osVer="${osVerRc#* }"
    
    #Keep this errant line as a working example of how to pull just the arch
    # osVer="${osVer1#* }"
    if [ "$runCondition" = "audit" ];
        then
            # echo "[audit] osVer=\"$osVer\""
            echo "[audit] [osVer] $osVer"
    fi
}

currentVersionpf() {
    # Check what the currently installed version of OPNSense is
    osVer=$(cat /etc/version)
    if [ "$runCondition" = "audit" ];
        then
            echo "[audit] osVer=\"$osVer\""
    fi
}

osTypeCheck() {
    if [ "$runCondition" = "audit" ];
        then
            echo "[Audit] User has requested the osTypeCheck function."
    fi

    # Am I pfSense?
    if [ -f /etc/platform ];
        then
            # echo "[Temp Notice] I made it this far."
            # if grep -q pfsense "/etc/platform";
            osTypeCheckOPNSense=$(`grep -q pfSense "/etc/platform"`)
            osTypeCheckOPNSenseRc=$?
            if [ "$osTypeCheckOPNSenseRc" = 0 ];
                then
                    osType="pfSense"
                    if [ "$runCondition" = "audit" ];
                        then
                            echo "[Audit] The file /etc/platform was found!"
                            echo "[Audit] This system is pfSense!"
                    fi
                    break
                else
                    if [ "$runCondition" = "audit" ];
                        then
                            echo "[Audit] This system is NOT pfSense!"
                    fi
            fi
        else
            if [ "$runCondition" = "audit" ];
                then
                    echo "[Audit] The file /etc/platform was not found."
            fi
    fi

    # Am I OPNSense?
    if [ -f /usr/local/sbin/opnsense-version ];
        then
            osTypeCheckOPNSense=$("/usr/local/sbin/opnsense-version")
            osTypeCheckOPNSenseRc=$?
            if [ "$osTypeCheckOPNSenseRc" = 0 ];
                then
                    osType="OPNSense"
                    if [ "$runCondition" = "audit" ];
                        then
                            echo "[Audit] [osTypeCheckOPNSense] ${osTypeCheckOPNSense#* }"
                    fi
                    if [ "$runCondition" = "audit" ];
                        then
                            echo "[Audit] This system is OPNSense!"
                    fi
                else
                    if [ "$runCondition" = "audit" ];
                        then
                            echo "[Audit] [osTypeCheckOPNSenseRc] $osTypeCheckOPNSenseRc"
                            echo "[Audit] This system is NOT OPNSense!"
                    fi
                break
            fi
    fi
}

# osArchCheck(){

# }

wanIpCheck() {
    wanIp=$(curl -s http://whatismyip.akamai.com/)
}

runStatusReport() {
    currentVersion $statusRpt
    echo "Saved to " $statusRpt
    exit 0
}

cpuArchCheckpf() {
    # Testing
    testVarRc=$(sysctl -a | egrep -i 'hw.machine_arch')
    #echo "[Test] $testVarRc[@]"
    echo "[testVarRc] Start" 
    echo $testVarRc[1]
    echo "[testVarRc] End"
    # testVar=$(cut -d' ' -f2- $testVarRc)
    testVar=$(sed -e 's/^\w*\ *//' $testVarRc)
    echo "[testVar] Start"
    echo $testVar
    echo "[testVar] End"
}

importEncryptionKey() {
    if [ -z $EncryptionKey ]
        # Empty
        then
            # echo "[Error]   It appears the statusRpt field is empty and the script cannot proceed. Sorry!"
            # exit 1
            read -e -p "Enter this system's encrpytion key as provided by the dashboard under customer settings: " importEncryptionKeyRec
            echo "You entered: $importEncryptionKeyRec"
            read -e -p "Shall we proceed? [y/N]: " importEncryptionKeyRecConfirm
            if [ "$importEncryptionKeyRecConfirm" = "y" ]; 
                then
                    EncryptionKey=$importEncryptionKeyRec
                    if [ "$runCondition" = "audit" ];
                        then
                            echo "[Audit] Trigger y confirm."
                            echo "[Audit] [importEncryptionKeyRec] $importEncryptionKeyRec"
                            echo "[Audit] [remoteFwConfig] $remoteFwConfig"
                    fi
                    echo "EncryptionKey=\"$EncryptionKey\"" >> $remoteFwConfig
                    if [ "$runCondition" = "audit" ];
                        then
                            echo "[Notice] Encryption key import process complete."
                    fi
                else
                    echo "User chose to cancel the process. Aborting."
                    exit 1
            fi
        else
            if [ "$runCondition" = "audit" ];
                then
                    echo "[EncryptionKey] $EncryptionKey"
            fi
    fi
}

openTcpTunnel() {
    # EncryptionKey=$1
    if [ "$runCondition" = "audit" ];
        then
            echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
            echo "[Audit] [EncryptionKey] $EncryptionKey"
            echo "[Audit] [remotefwServerIp] $remotefwServerIp"
            echo "[Audit] [remotefwServerPort] $remotefwServerPort"
            echo "[Audit] [systemInfo] $systemInfo"
            echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    fi
    # openssl enc -e -aes-256-cbc -out $systemInfo -k $EncryptionKey | nc $remotefwServerIp $remotefwServerPort -in $systemInfo
    # openssl enc -e -aes-256-cbc -out $systemInfo -k $EncryptionKey | nc $remotefwServerIp $remotefwServerPort
}
#=============== End of Functions ===============

#=============== Start of Condition Statements ===============
if [ $runCommand == "install" ]
    then
        importConfig audit
        remotefwInstall
fi

if [ $runCommand == "remove" ]
    then
        importConfig audit
        echo "[$date] Removal Started."
        if [ -f $remotefwConfigDir/main.cfg ]
            then
                rm $remotefwConfigDir/main.cfg
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: $remotefwConfigDir/main.cfg was deleted."
                fi
            else
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: $remotefwConfigDir/main.cfg does not exist or could not be deleted."
                fi
        fi

        if [ -f /usr/local/www/services_remotefw.php ]
            then
                rm /usr/local/www/services_remotefw.php
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: /usr/local/www/services_remotefw.php was deleted."
                fi
            else
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: /usr/local/www/services_remotefw.php does not exist or could not be deleted."
                fi
        fi

        if [ -f $remotefwConfigDir/status.rpt ]
            then
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: $remotefwConfigDir/status.rpt was deleted."
                fi
                rm $remotefwConfigDir/status.rpt
            else
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: $remotefwConfigDir/status.rpt does not exist or could not be deleted."
                fi
        fi

        if [ -f $remotefwConfigDir/system.info ]
            then
                rm $remotefwConfigDir/system.info
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: $remotefwConfigDir/system.info was deleted."
                fi
            else
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] File: $remotefwConfigDir/system.info does not exist or could not be deleted."
                fi
        fi
        
        if [ -d $remotefwConfigDir ]
            then
                rm -rf $remotefwConfigDir
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] Directory: $remotefwConfigDir was deleted."
                fi
            else
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] Directory: The main config directory does not exist or could not be deleted."
                fi
        fi
        
        if [ -f $installDir/remotefw ]
            then
                rm $installDir/remotefw
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] $installDir/remotefw was deleted."
                fi
            else
                if [ "$runCondition" = "audit" ];
                    then
                        echo "[Remove] $installDir/remotefw does not exist or could not be deleted."
                fi
        fi
        echo "[$date] Removal complete."
        echo "===================="
fi

# This switch is used to audit the check data 
if [ $runCommand == "testconfig" ]
    then  
        echo ""
        echo "app info:"
        echo "===================="
        importConfig
        echo "[agentVersion] $agentVersion"
        echo "[configVer] $configVer"
        
        echo ""
        echo "Performing OS Check..."
        echo "===================="
        osTypeCheck # audit
        echo "[osType] $osType"
        if [ "$osType" = "OPNSense" ];
            then
                currentVersionOPN
                #audit
        fi
        if [ "$osType" = "pfSense" ];
            then
                currentVersionpf
                #audit
        fi
        echo "[osVer] $osVer"

        echo ""
        echo "Detected Wan IP"
        echo "===================="
        wanIpCheck 
        echo "[wanIp] $wanIp"
        
        echo ""
        echo "Detected Arch Type"
        echo "===================="
        cpuArchCheckpf
        # echo "-------------------"
        # importSystemInfo
fi

# This is the switch used to perform the initital adoption process.
if [ $runCommand == "adopt" ]
    then
        importConfig
        importSystemInfo
        echo "#!/bin/sh" >> $systemInfo
        osTypeCheck
        if [ "$osType" = "OPNSense" ];
            then
                currentVersionOPN
                #audit
        fi
        if [ "$osType" = "pfSense" ];
            then
                currentVersionpf
                #audit
        fi
        
        echo "osType=\"$osType\"" >> $systemInfo
        echo "osVer=\"$osVer\"" >> $systemInfo
        wanIpCheck && echo "wanIp=\"$wanIp\"" >> $systemInfo
        # importEncryptionKey
        openTcpTunnel $EncryptionKey
fi
#=============== Start of Condition Statements ===============